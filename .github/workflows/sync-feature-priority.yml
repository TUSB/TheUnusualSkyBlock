name: Label Issue Based on Priority

on:
  issues:
    types: [opened, edited]

jobs:
  set_env_priority:
    runs-on: ubuntu-latest
    outputs:
      PRIORITY: ${{ steps.extract_priority.outputs.PRIORITY }}
    steps:
      - name: Extract priority and set output
        id: extract_priority
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            const priorityMatch = issueBody.match(/###\s*重要度\s*\n\s*(.*)/);
            if (priorityMatch) {
              const priority = priorityMatch[1].trim();
              core.setOutput('PRIORITY', priority);
              console.log(`Priority set ${priority}`);
            } else {
              core.setOutput('PRIORITY', '');
            }

  add_label_based_on_priority:
    runs-on: ubuntu-latest
    needs: set_env_priority
    if: ${{ needs.set_env_priority.outputs.PRIORITY != '' }}
    steps:
      - name: Add label based on priority
        uses: actions/github-script@v6
        env:
          PRIORITY: ${{ needs.set_env_priority.outputs.PRIORITY }}
        with:
          script: |
            const priority = process.env.PRIORITY;
            let label = '';
            if (priority.includes('低め')) {
              label = '優先度: 低い';
            } else if (priority.includes('通常')) {
              label = '優先度: 通常';
            } else if (priority.includes('高い')) {
              label = '優先度: 高い';
            }
            if (label) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [label]
              });
            }

  check-field:
    runs-on: ubuntu-latest
    needs: set_env_priority
    env:
      PRIORITY: ${{ needs.set_env_priority.outputs.PRIORITY }}
    steps:
      - name: Extract Issue Form Data
        id: form
        uses: actions-ecosystem/action-get-issue-form-parameters@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Field Content
        id: get_field
        run: |
          echo "FIELD_CONTENT<<EOF" >> $GITHUB_ENV
          echo "${{ steps.form.outputs['task-reasons-for-high-priority'] }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check if Field is Empty, Default Text, or No Response
        id: check_field
        run: |
          # フィールドの内容を取得
          FIELD_CONTENT="${FIELD_CONTENT}"
          # フィールドが存在しない場合は未記入とみなす
          if [ -z "$FIELD_CONTENT" ]; then
            echo "field_empty=true" >> $GITHUB_OUTPUT
          else
            # フィールドの内容から全ての空白文字を削除
            TRIMMED_CONTENT=$(echo "$FIELD_CONTENT" | tr -d '[:space:]')
            # 比較対象のデフォルトテキストと"No response"から全ての空白文字を削除
            DEFAULT_TEXT=$(echo "### なぜ優先度が高いのか" | tr -d '[:space:]')
            NO_RESPONSE=$(echo "_Noresponse_" | tr -d '[:space:]')
            if [ -z "$TRIMMED_CONTENT" ] || [ "$TRIMMED_CONTENT" = "$DEFAULT_TEXT" ] || [ "$TRIMMED_CONTENT" = "$NO_RESPONSE" ]; then
              echo "field_empty=true" >> $GITHUB_OUTPUT
            else
              echo "field_empty=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Close Issue if Field is Empty
        if: steps.check_field.outputs.field_empty == 'true'
        uses: actions/github-script@v6
        env:
          PRIORITY: ${{ env.PRIORITY }}
        with:
          script: |
            const priority = process.env.PRIORITY;
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            if (priority && priority.includes('高い')) {
              // コメントを追加してIssueをクローズする
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '優先度が「高い」と選択されていますが、必要な情報が記入されていないため、このIssueはクローズされました。必要な情報を記入して再度作成してください。'
              });
      
              await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed',
                  state_reason: 'not_planned'
              });
            } else {
              const issueBody = issue.body;
              // "なぜ優先度が高いのか"のセクションを削除
              const newBody = issueBody.replace(/###\s*なぜ優先度が高いのか[\s\S]*?(?=###|$)/g, '').trim();
                  
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: newBody
              });
            }
